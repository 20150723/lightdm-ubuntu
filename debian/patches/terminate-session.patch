Description: Terminate leftover processes in greeter session
   It can happen that the greeter session does not properly clean up itself on
   logout. This causes leaked processes like settings-daemon which act on the
   user session as they share the same $DISPLAY. Ask logind to terminate
   remaining processes in the greeter session on closing, which is more robust
   than trying to fix every greeter.
Author: Martin Pitt <martin.pitt@canonical.com>
Forwarded: https://code.launchpad.net/~pitti/lightdm/cleanup-session/+merge/310758
Bug-Ubuntu: https://launchpad.net/bugs/1637758

=== modified file 'src/login1.c'
--- old/src/login1.c	2015-10-16 10:04:18 +0000
+++ new/src/login1.c	2016-11-14 11:00:45 +0000
@@ -437,6 +437,39 @@
     }
 }
 
+void
+login1_service_terminate_session (Login1Service *service, const gchar *session_id)
+{
+    GError *error = NULL;
+
+    g_return_if_fail (service != NULL);
+    g_return_if_fail (session_id != NULL);
+
+    g_debug ("Terminating login1 session %s", session_id);
+
+    if (session_id)
+    {
+        GVariant *result;
+
+        result = g_dbus_connection_call_sync (service->priv->connection,
+                                              LOGIN1_SERVICE_NAME,
+                                              LOGIN1_OBJECT_NAME,
+                                              LOGIN1_MANAGER_INTERFACE_NAME,
+                                              "TerminateSession",
+                                              g_variant_new ("(s)", session_id),
+                                              G_VARIANT_TYPE ("()"),
+                                              G_DBUS_CALL_FLAGS_NONE,
+                                              -1,
+                                              NULL,
+                                              &error);
+        if (error)
+            g_warning ("Error terminating login1 session: %s", error->message);
+        g_clear_error (&error);
+        if (result)
+            g_variant_unref (result);
+    }
+}
+
 static void
 login1_service_init (Login1Service *service)
 {

=== modified file 'src/login1.h'
--- old/src/login1.h	2014-12-16 22:48:40 +0000
+++ new/src/login1.h	2016-11-14 11:00:45 +0000
@@ -78,6 +78,8 @@
 
 void login1_service_activate_session (Login1Service *service, const gchar *session_id);
 
+void login1_service_terminate_session (Login1Service *service, const gchar *session_id);
+
 const gchar *login1_seat_get_id (Login1Seat *seat);
 
 gboolean login1_seat_get_can_graphical (Login1Seat *seat);

=== modified file 'src/session.c'
--- old/src/session.c	2016-07-11 21:51:14 +0000
+++ new/src/session.c	2016-11-14 11:00:45 +0000
@@ -913,6 +913,11 @@
 {
     g_return_if_fail (session != NULL);
 
+    /* Kill remaining processes in our logind session to avoid them leaking
+     * to the user session (they share the same $DISPLAY) */
+    if (getuid () == 0 && session->priv->login1_session_id)
+        login1_service_terminate_session (login1_service_get_instance (), session->priv->login1_session_id);
+
     /* If can cleanly stop then do that */
     if (session_get_is_authenticated (session) && !session->priv->command_run)
     {

